

---
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    #url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull
    # 47.107.74.74 woaini123
    url: jdbc:mysql://${data.datasource.ip}:3306/${data.datasource.db}?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
    username: root
    #password: z012345
    password: ${data.datasource.password}
    # hikari
    type: com.zaxxer.hikari.HikariDataSource
    # Hikari 连接池配置 ------ 详细配置请访问：https://github.com/brettwooldridge/HikariCP
    hikari:
      # 连接池名称
      pool-name: HikariCP
      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      # 数据库连接超时时间,默认30秒，即30000
      connection-timeout: 5000
      #connection-test-query: SELECT 1
      # 空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 180000
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 1800000
      # 最小空闲连接数量
      minimum-idle: 5
      # 连接池最大连接数，默认是10
      maximum-pool-size: 15
  # redis .
  redis:
    #host: 127.0.0.1
    #port: 6379
    #password: z012345
    #database: 0
    #timeout: 60s  # 数据库连接超时时间，2.0 中该参数的类型为Duration，这里在配置的时候需要指明单位
    # 连接池配置，2.0中直接使用jedis或者lettuce配置连接池
    jedis:
      pool:
        # 最大空闲连接数
        max-idle: 20
        # 最小空闲连接数
        min-idle: 2
        # 等待可用连接的最大时间，负数为不限制   default -1
        max-wait: -1
        # 最大活跃连接数，负数为不限制
        max-active: -1
        commandTimeout: 3000  #redis操作的超时时间
        maxTotal: 50 #最大连接数
        nodes:
          - 154.222.138.5:7000
          - 154.222.138.5:7001
          - 154.222.138.5:7002
          - 154.222.138.5:7003
          - 154.222.138.5:7004
          - 154.222.138.5:7005
        password: Qdsemmde_sde@#!Bitrade
  transaction: 
    attributes: 
      add*=PROPAGATION_REQUIRED,-Exception
      
      remove*=PROPAGATION_REQUIRED,-Exception
      
      modify*=PROPAGATION_REQUIRED,-Exception
      
      get*=PROPAGATION_REQUIRED,-Exception,readOnly
    # AspectJ的切入点表达式---execution表达式 .
    expression: execution (* com..service.impl..*ServiceImpl.*(..))
  application_name: bittrade-${data.application.name:}
  profiles:
    include:
      - data
      - eureka

mybatis-plus:
  # Property 'configuration' and 'configLocation' can not specified with together
  #config-location: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath*:/__default_SQL/**/IDefault*DAO.xml,classpath*:/SQL/**/I*DAO.xml
  #mapper-locations: ${data.mapper-locations}
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: ${data.model-package:com.**.pojo.model.*}
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    #logImpl: org.apache.ibatis.logging.stdout.StdOutImpl

---
server:
  #port: 8900
  # 下面是配置undertow作为服务器的参数
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    # 不要设置过大，如果过大，启动项目会报错：打开文件数过多
    io-threads: 16
    # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
    # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
    worker-threads: 256
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    buffers-per-region: 1024
    max-http-post-size: 0 # Maximum size in bytes of the HTTP post content.
    accesslog:
      enabled: false # Enable access log.
      dir: /log # Undertow access log directory.
      pattern: common # Format pattern for access logs.
      prefix: access_log. # Log file name prefix.
      suffix: log # Log file name suffix.
      rotate: true # Enable access log rotation.
