<#--
<trim prefix="WHERE" prefixOverrides="AND | OR">
  ... 
</trim>
它的意思就是： 当WHERE后紧随AND或则OR的时候，就去除AND或者OR。 除了WHERE以外
<trim prefix="SET" suffixOverrides=",">
  ...
</trim>
WHERE是使用的 prefixOverrides（前缀）， SET是使用的 suffixOverrides （后缀）

引用类型了，  不用再使用简单数据类型来比较 != '' 或者 != 0 的情况了？
-->
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
	This code is generated automatically. Please do not edit it.
	现在字段也可以要彻底动态？
-->
<mapper namespace="${DEFAULT_BASE_PKG}.DAO${module_name}.IDefault${struct.className}DAO">

	<!-- 通用查询映射结果 -->
	<resultMap id="BaseResultMap" type="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		<#-- template pattern . -->
		<#list struct.list_itemPK as itemPK>
		<id javaType="${itemPK.javaType}" property="${itemPK.name}" jdbcType="${itemPK.jdbcType}" column="${itemPK.columnName}" />
		</#list>
		<#list struct.list_item as item>
		<result javaType="${item.javaType}" property="${item.name}" jdbcType="${item.jdbcType}" column="${item.columnName}" />
		</#list>
	</resultMap>

	<!--
		通用查询结果列
		其他类似的类似，也可以公用（共用）引用。
	-->
	<sql id="Base_Column_List">
		<choose>
			<when test="strArr_field != null">
		<foreach collection="strArr_field" index="index" item="item" open="" separator="," close="">
			`${r'${'}item${r'}'}`
		</foreach>
			</when>
			<otherwise>
		<#list struct.list_itemPK as itemPK>
		`${itemPK.columnName}` AS ${itemPK.name}, 
		</#list>
		<#list struct.list_item as item>
		`${item.columnName}` AS ${item.name}<#if item_has_next>, </#if>
		</#list>
			</otherwise>
		</choose>
	</sql>
	
	<!-- 其他的也可以类似的加， yes， 类似蕾丝的。 -->
	<sql id="sql_WHERE_forProperty">
		<choose>
			<when test="map_in != null">
			
		<foreach collection="map_in.entrySet()" index="map_index" item="map_item">
		AND `${r'${'}map_index${r'}'}` IN 
		<foreach collection="map_item" index="arr_index" item="arr_item" open="(" separator="," close=")">
			${r'#{'}arr_item${r'}'}
		</foreach>
		</foreach>
			
			</when>
			<!--
			<when test="_parameter != null and _parameter.${struct.className} != null and ${struct.className}.map_in != null">
			</when>
			<otherwise>
			</otherwise>
			-->
		</choose>
	</sql>
	<sql id="sql_WHERE_forObject">
		<choose>
			<when test="${struct.variableName}.map_in != null">
			
		<foreach collection="${struct.variableName}.map_in.entrySet()" index="map_index" item="map_item">
		AND `${r'${'}map_index${r'}'}` IN 
		<foreach collection="map_item" index="arr_index" item="arr_item" open="(" separator="," close=")">
			${r'#{'}arr_item${r'}'}
		</foreach>
		</foreach>
			
			</when>
		</choose>
	</sql>
	
	
	<insert id="add" parameterType="${POJO_BASE_PKG}.model${module_name}.${struct.className}"<#list struct.list_itemPK as itemPK><#if itemPK.autoIncrement> useGeneratedKeys="true" keyProperty="${itemPK.name}"<#break></#if></#list>>
		INSERT INTO ${struct.tableName}(<#list struct.list_itemPK as itemPK><#if !itemPK.autoIncrement>`${itemPK.columnName}`, </#if></#list><#list struct.list_item as item>`${item.columnName}`<#if item_has_next>, </#if></#list>)
		VALUES(<#list struct.list_itemPK as itemPK><#if !itemPK.autoIncrement>${r'#{'}${itemPK.name}${r',jdbcType='}${itemPK.jdbcType}${r'}'}, </#if></#list><#list struct.list_item as item>${r'#{'}${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}<#if item_has_next>, </#if></#list>)
	</insert>
	
	<insert id="addWithSelective" parameterType="${POJO_BASE_PKG}.model${module_name}.${struct.className}"<#list struct.list_itemPK as itemPK><#if itemPK.autoIncrement> useGeneratedKeys="true" keyProperty="${itemPK.name}"<#break></#if></#list>>
		INSERT INTO ${struct.tableName}(
			<#list struct.list_itemPK as itemPK>
			<#if !itemPK.autoIncrement>
			<if test="${itemPK.name} != null">
			`${itemPK.columnName}`, 
			</if>
			</#if>
			</#list>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			`${item.columnName}`<#if item_has_next>, </#if>
			</if>
			</#list>
		)
		VALUES(
			<#list struct.list_itemPK as itemPK>
			<#if !itemPK.autoIncrement>
			<if test="${itemPK.name} != null">
			${r'#{'}${itemPK.name}${r',jdbcType='}${itemPK.jdbcType}${r'}'}, 
			</if>
			</#if>
			</#list>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			${r'#{'}${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}<#if item_has_next>, </#if>
			</if>
			</#list>
		)
	</insert>
	
	<delete id="removeByPK">
		DELETE FROM ${struct.tableName}
		<where>
			<#list struct.list_itemPK as itemPK>
			AND `${itemPK.columnName}` = ${r'#{'}${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</#list>
		</where>
	</delete>
	
	<delete id="removeBy" parameterType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		DELETE FROM ${struct.tableName}
		<where>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}
			</if>
			</#list>
		</where>
	</delete>
	
	<update id="modifyByPK" parameterType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		UPDATE ${struct.tableName}
		<set>
			<#list struct.list_item as item>
			`${item.columnName}` = ${r'#{'}${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}, 
			</#list>
		</set>
		<where>
			<#list struct.list_itemPK as itemPK>
			AND `${itemPK.columnName}` = ${r'#{'}${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</#list>
		</where>
	</update>
	
	<update id="modifyWithSelectiveByPK" parameterType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		UPDATE ${struct.tableName}
		<set>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			`${item.columnName}` = ${r'#{'}${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}, 
			</if>
			</#list>
		</set>
		<where>
			<#list struct.list_itemPK as itemPK>
			AND `${itemPK.columnName}` = ${r'#{'}${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</#list>
		</where>
	</update>
	
	<update id="modifyBy">
		UPDATE ${struct.tableName}
		<set>
			<#list struct.list_item as item>
			`${item.columnName}` = ${r'#{'}${struct.variableName}.${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}, 
			</#list>
		</set>
		<where>
		<if test="condi${struct.className} != null">
			<#list struct.list_itemPK as itemPK>
			<if test="condi${struct.className}.${itemPK.name} != null">
			AND `${itemPK.columnName}` = ${r'#{'}condi${struct.className}.${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</if>
			</#list>
			<#list struct.list_item as item>
			<if test="condi${struct.className}.${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}condi${struct.className}.${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
		</if>
		</where>
	</update>
	
	<update id="modifyWithSelectiveBy">
		UPDATE ${struct.tableName}
		<set>
		<if test="${struct.variableName} != null">
			<#list struct.list_item as item>
			<if test="${struct.variableName}.${item.name} != null">
			`${item.columnName}` = ${r'#{'}${struct.variableName}.${item.name}${r',jdbcType='}${item.jdbcType}${r'}'}, 
			</if>
			</#list>
		</if>
		</set>
		<where>
		<if test="condi${struct.className} != null">
			<#list struct.list_itemPK as itemPK>
			<if test="condi${struct.className}.${itemPK.name} != null">
			AND `${itemPK.columnName}` = ${r'#{'}condi${struct.className}.${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</if>
			</#list>
			<#list struct.list_item as item>
			<if test="condi${struct.className}.${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}condi${struct.className}.${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
		</if>
		</where>
	</update>
	
	<select id="getByPK" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
		FROM ${struct.tableName}
		<where>
			<#list struct.list_itemPK as itemPK>
			AND `${itemPK.columnName}` = ${r'#{'}${itemPK.name},jdbcType=${itemPK.jdbcType}${r'}'}
			</#list>
		</where>
	</select>
	
	<select id="getBy" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
		FROM ${struct.tableName}
		<where>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
		</where>
		LIMIT 1
	</select>
	
	<select id="get" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
		FROM ${struct.tableName}
		LIMIT 1
	</select>
	
	<select id="getsBy" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#--
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
			-->
			<include refid="Base_Column_List"></include>
		FROM ${struct.tableName}
		<where>
			<#list struct.list_item as item>
			<if test="${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
			<include refid="sql_WHERE_forProperty"></include>
		</where>
	</select>
	
	<select id="gets" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#--
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
			-->
			<include refid="Base_Column_List"></include>
		FROM ${struct.tableName}
	</select>
	
	<select id="getCntBy" resultType="int">
		SELECT COUNT(1)
		FROM ${struct.tableName}
		<where>
		<if test="${struct.variableName} != null">
			<#list struct.list_item as item>
			<if test="${struct.variableName}.${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}${struct.variableName}.${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
			<include refid="sql_WHERE_forObject"></include>
		</if>
		</where>
	</select>
	
	<select id="getsByPage" resultType="${POJO_BASE_PKG}.model${module_name}.${struct.className}">
		SELECT 
			<#list struct.list_itemPK as itemPK>
			`${itemPK.columnName}`, 
			</#list>
			<#list struct.list_item as item>
			`${item.columnName}`<#if item_has_next>, </#if>
			</#list>
		FROM ${struct.tableName}
		<where>
		<if test="${struct.variableName} != null">
			<#list struct.list_item as item>
			<if test="${struct.variableName}.${item.name} != null">
			AND `${item.columnName}` = ${r'#{'}${struct.variableName}.${item.name},jdbcType=${item.jdbcType}${r'}'}
			</if>
			</#list>
			<include refid="sql_WHERE_forObject"></include>
		</if>
		</where>
		LIMIT ${r'#{'}page${r'}'}, ${r'#{'}size${r'}'}
	</select>

</mapper>